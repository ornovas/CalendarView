/*
 * Copyright (C) 2016 huanghaibin_dev <huanghaibin_dev@163.com>
 * WebSite https://github.com/MiracleTimes-Dev
 * Version 1.0.2
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
//apply plugin: 'maven-publish'
//afterEvaluate {
//    publishing {
//        def versionName = "3.7.1.43" // 当前版本依赖库版本号，这个jitpack不会使用到，只是我们开发者自己查看
//        publications {
//            // Creates a Maven publication called "release".
//            release(MavenPublication) {
//                // Applies the component for the release build variant.
////                from components.release // 表示发布 release（jitpack 都不会使用到）
////                from components.java
//                // You can then customize attributes of the publication as shown below.
//                groupId = 'com.haibin.calendarview' // 这个是依赖库的组 id
//                artifactId = 'calendarview' // 依赖库的名称（jitpack 都不会使用到）
//                version = versionName
//            }
//        }
////        repositories {
////            // 下面这部分，不是很清楚加不加，但是最后加上
////            maven {
////                // change URLs to point to your repos, e.g. http://my.org/repo
////                def baseUrl = buildDir.getParent()
////                def releasesRepoUrl = "$baseUrl/repos/releases"
////                def snapshotsRepoUrl = "$baseUrl/repos/snapshots"
////                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
////            }
////        }
//    }
//}

apply plugin: 'maven-publish'

def pomLibGroupName = 'com.haibin.calendarview'
def pomLibArtifactId = project.name
def pomLibVersion = getGitLatestTag()
def pomLibDescription = "TODO description: ${rootProject.name} for Android"

//生成文档注释
tasks.register('androidJavadocs', Javadoc) {
    failOnError = false
    source = android.sourceSets.main.java.srcDirs
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += files(ext.androidJar)
}
//将文档打包成jar
tasks.register('androidJavadocsJar', Jar) {
    dependsOn androidJavadocs
    archiveClassifier.set('javadoc')
    from androidJavadocs.destinationDir
}
//将源码打包，这一点对kotlin来说很重要，否则业务侧无法看到源码
tasks.register('androidSourcesJar', Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}
// 打包本地引入的aar
//configurations.maybeCreate("default")
//def publishArtifact = artifacts.add("default", file('libs/oaid_sdk_1.0.30.aar'))

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                try {
                    from components.release
                } catch (e) {
                    e.printStackTrace()
                }
                groupId pomLibGroupName
                artifactId pomLibArtifactId
                version pomLibVersion             // Your package version
                description pomLibDescription

                artifact(androidSourcesJar)//将源码打包进aar，如果不需要可以去掉
                artifact(androidJavadocsJar)//将注释打包进aar，如果不需要可以去掉
                artifact "${buildDir}/outputs/aar/calendarview.aar"
                // 将aar推送到远程仓库
//                artifact publishArtifact    //Example: *./target/myJavaClasses.jar*

                //带上依赖 ，否则会报错
//                pom.withXml {
//                    def dependenciesNode = asNode().appendNode('dependencies')
//
//                    def scopes = [configurations.implementation]
//                    if (configurations.hasProperty("api")) {
//                        scopes.add(configurations.api)
//                    }
//                    if (configurations.hasProperty("implementation")) {
//                        scopes.add(configurations.implementation)
//                    }
//                    if (configurations.hasProperty("debugImplementation")) {
//                        scopes.add(configurations.debugImplementation)
//                    }
//                    if (configurations.hasProperty("releaseImplementation")) {
//                        scopes.add(configurations.releaseImplementation)
//                    }
//
////                    if (project.ext.targetType != "jar") {
////                        scopes.add(configurations.provided)
////                    }
//
//                    scopes.each { scope ->
//                        scope.allDependencies.each {
//                            if (it instanceof ModuleDependency) {
//                                boolean isTransitive = ((ModuleDependency) it).transitive
//                                if (!isTransitive) {
//                                    println "<<<< not transitive dependency: [${it.group}, ${it.name}, ${it.version}]"
//                                    return
//                                }
//                            }
//
//                            if (it.group == "${project.rootProject.name}.libs" || it.version == 'unspecified') {
//                                return
//                            }
//
//                            if (it.group && it.name && it.version) {
//                                def dependencyNode = dependenciesNode.appendNode('dependency')
//                                dependencyNode.appendNode('groupId', it.group)
//                                dependencyNode.appendNode('artifactId', it.name)
//                                dependencyNode.appendNode('version', it.version)
//                                dependencyNode.appendNode('scope', scope.name)
//                            }
//                        }
//                    }
//                }

                pom.withXml {
                    def root = asNode()
                    root.appendNode('name', pomLibArtifactId)
                    root.appendNode('description', pomLibDescription)
                    root.appendNode('url', pomSiteUrl)
                    root.appendNode('licenses').appendNode('license').appendNode('name', pomLicenses[0])
                    def developer = root.appendNode('developers').appendNode('developer')
                    developer.appendNode('id', pomDeveloperId)
                    developer.appendNode('name', pomDeveloperName)
                    developer.appendNode('email', pomDeveloperEmail)
                    // Define this explicitly if using implementation or api configurations
                    def dependenciesNode = root['dependencies'][0] ?: root.appendNode('dependencies')
                    def addDependency = {
                        // Ensure dependencies such as fileTree are not included.
                        if (it.group && it.name && it.version) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            if (it.group == pomLibGroupName && it.version == 'unspecified') {
                                dependencyNode.appendNode('version', pomLibVersion)
                            } else {
                                dependencyNode.appendNode('version', it.version)
                            }
                            if (it.hasProperty('optional') && it.optional) {
                                dependencyNode.appendNode('optional', 'true')
                            }
                        }
                    }
                    // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                    configurations.implementation.allDependencies.each addDependency
                    configurations.api.allDependencies.each addDependency
                }
            }
        }

        repositories {
            // 下面这部分，不是很清楚加不加，但是最后加上
            maven {
                // change URLs to point to your repos, e.g. http://my.org/repo
                def baseUrl = buildDir.getParent()
                def releasesRepoUrl = "$baseUrl/repos/releases"
                def snapshotsRepoUrl = "$baseUrl/repos/snapshots"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            }
        }

        // Repositories *to* which Gradle can publish artifacts
//        repositories {
//            maven {
//                url uri('../local_maverepo')
//                credentials {
//                    username "default"
//                    password "default"
//                }
//            }
//        }
    }
}

static def getGitLatestTag() {
    try {
        // See https://www.jianshu.com/p/2ecfd791c464
        def cmd = 'git describe --tags --always'
        return cmd.execute().text.trim() ?: '0.1.0'
    } catch (ignored) {
        return "0.0.0"
    }
}
